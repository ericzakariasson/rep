use std::fmt;

#[derive(Debug)]
pub enum RepError {
    InvalidArguments(String),
    FileNotFound(String),
    GlobPatternError(String),
    IoError(String),
    NoFilesMatched,
}

impl fmt::Display for RepError {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        match self {
            RepError::InvalidArguments(msg) => {
                write!(f, "‚ùå Invalid command: {}\n\n", msg)?;
                write!(f, "üí° Tip: Make sure you provide both a search pattern and at least one file.\n")?;
                write!(f, "   Example: rep \"search text\" file.txt")
            }
            RepError::FileNotFound(path) => {
                write!(f, "‚ùå Cannot find file: '{}'\n\n", path)?;
                write!(f, "üí° Tips:\n")?;
                write!(f, "   ‚Ä¢ Check if the file path is correct\n")?;
                write!(f, "   ‚Ä¢ Make sure you have read permissions\n")?;
                write!(f, "   ‚Ä¢ Try using the full path to the file")
            }
            RepError::GlobPatternError(pattern) => {
                write!(f, "‚ùå Invalid file pattern: {}\n\n", pattern)?;
                write!(f, "üí° Tips for glob patterns:\n")?;
                write!(f, "   ‚Ä¢ Use *.txt to match all .txt files\n")?;
                write!(f, "   ‚Ä¢ Use **/*.rs to match .rs files in all subdirectories\n")?;
                write!(f, "   ‚Ä¢ Escape special characters with backslash")
            }
            RepError::IoError(msg) => {
                write!(f, "‚ùå File operation failed: {}\n\n", msg)?;
                write!(f, "üí° Common causes:\n")?;
                write!(f, "   ‚Ä¢ Insufficient permissions\n")?;
                write!(f, "   ‚Ä¢ File is locked by another process\n")?;
                write!(f, "   ‚Ä¢ Disk space or quota issues")
            }
            RepError::NoFilesMatched => {
                write!(f, "‚ùå No files found matching your pattern\n\n")?;
                write!(f, "üí° Tips:\n")?;
                write!(f, "   ‚Ä¢ Check if files exist in the current directory\n")?;
                write!(f, "   ‚Ä¢ Try a broader pattern (e.g., *.txt instead of specific names)\n")?;
                write!(f, "   ‚Ä¢ Use 'ls' to see available files")
            }
        }
    }
}

impl std::error::Error for RepError {}

pub type Result<T> = std::result::Result<T, RepError>; 